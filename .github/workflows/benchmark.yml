name: Benchmark resources usage

on:
  # push:
  #   branches: ["master"]
  #   paths:
  #     - "src/**"
  # pull_request:
  #   branches: ["master"]
  #   paths:
  #     - "src/**"
  workflow_dispatch:

jobs:
  hot-storage:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache node_modules ðŸ“¦
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install --prefer-offline --no-audit

      - name: Run benchmark (memory)
        run: make dist && node --expose-gc benchmark/memory/benchmark.mjs hot-storage

      - name: Run benchmark (cpu)
        run: make dist && node --expose-gc benchmark/cpu/benchmark.mjs hot-storage

      - name: Run benchmark (speed)
        run: make dist && node --expose-gc benchmark/speed/benchmark.mjs hot-storage

      - name: Run benchmark (gc)
        run: make dist && node --expose-gc benchmark/gc/benchmark.mjs hot-storage

  redis:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: Cache node_modules ðŸ“¦
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install --prefer-offline --no-audit

      - name: Wait for redis
        timeout-minutes: 5
        run: |
          export REDIS_HOST=$(docker inspect redis > /tmp/redis.json && node -p -e "require('/tmp/redis.json')[0].NetworkSettings.Networks.bridge.IPAddress")
          while ! node -p -e "r=require('ioredis');c=new r(6379,process.env.REDIS_HOST);c.on('error', ()=>c.disconnect());c.ping().catch(()=>process.exit(1)).finally(()=>c.disconnect())"; do
            sleep 1
          done

      - name: Run benchmark (memory)
        run: |
          export REDIS_HOST=$(docker inspect redis > /tmp/redis.json && node -p -e "require('/tmp/redis.json')[0].NetworkSettings.Networks.bridge.IPAddress")
          make dist && node --expose-gc benchmark/memory/benchmark.mjs redis
        env:
          # The default Redis port
          REDIS_PORT: 6379

      - name: Run benchmark (cpu)
        run: |
          export REDIS_HOST=$(docker inspect redis > /tmp/redis.json && node -p -e "require('/tmp/redis.json')[0].NetworkSettings.Networks.bridge.IPAddress")
          make dist && node --expose-gc benchmark/cpu/benchmark.mjs redis
        env:
          # The default Redis port
          REDIS_PORT: 6379

      - name: Run benchmark (speed)
        run: |
          export REDIS_HOST=$(docker inspect redis > /tmp/redis.json && node -p -e "require('/tmp/redis.json')[0].NetworkSettings.Networks.bridge.IPAddress")
          make dist && node --expose-gc benchmark/speed/benchmark.mjs redis
        env:
          # The default Redis port
          REDIS_PORT: 6379

      - name: Run benchmark (gc)
        run: |
          export REDIS_HOST=$(docker inspect redis > /tmp/redis.json && node -p -e "require('/tmp/redis.json')[0].NetworkSettings.Networks.bridge.IPAddress")
          make dist && node --expose-gc benchmark/gc/benchmark.mjs redis
        env:
          # The default Redis port
          REDIS_PORT: 6379
